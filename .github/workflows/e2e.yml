name: E2E Test

on:
  workflow_run:
    workflows: ["Deploy to ECR"]
    types: 
      - completed
  workflow_dispatch:
  push:
    branches:
      - "DIDX-176-test-infra-e2e-pytest"
    tags:
      - "v*"
  pull_request:
    branches:
      - "development"
  pull_request_review:
    types: [submitted]

jobs:
  check_artifact:
    runs-on: ubuntu-latest
    outputs:
      update_deployments_completed: ${{ steps.check_artifact.outputs.update_deployments_completed }}
    steps:
      - name: Download artifact from First Workflow
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require("fs");
            const artifact = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.event.workflow_run.id,
            });

            const specificStepArtifact = artifact.data.artifacts.find((artifact) => artifact.name === "update-deployments-completed");

            if (specificStepArtifact) {
              core.setOutput("update_deployments_completed", "true");
            } else {
              core.setOutput("update_deployments_completed", "false");
            }
  test:
    needs: check_artifact
    if: needs.check_artifact.outputs.update_deployments_completed == 'true'
    name: Test with pytest
    # needs: deploy
    runs-on: ubuntu-20.04
    permissions:
      id-token: write # This is required for requesting the JWT
    concurrency: dev-cloudapi # Only one test / deployment at a time
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.8.10
        uses: actions/setup-python@v4
        # with:
        #   python-version: "3.8.10"

      - name: Install test dependencies.
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt -r requirements.dev.txt -r trustregistry/requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd

      - name: Install Helm (for kubectl)
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name cloudapi-dev

      - name: Tailscale
        uses: tailscale/github-action@main
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          version: 1.38.2
          args: --advertise-tags=tag:cicd

      - name: Set environment variables
        run: |
          # ./app/constants.py
          echo "ACAPY_GOVERNANCE_AGENT_URL=https://governance-ga-agent.cloudapi.dev.didxtech.com" >> $GITHUB_ENV
          echo "ACAPY_TENANT_AGENT_URL=https://governance-mt-agent.cloudapi.dev.didxtech.com" >> $GITHUB_ENV
          echo ACAPY_GOVERNANCE_AGENT_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_GOVERNANCE_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          echo "::add-mask::$ACAPY_GOVERNANCE_AGENT_API_KEY"
          echo TENANT_TENANT_AGENT_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_TENANT_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          echo "::add-mask::$TENANT_TENANT_AGENT_API_KEY"
          echo "TRUST_REGISTRY_URL=https://trust-registry.cloudapi.dev.didxtech.com" >> $GITHUB_ENV

          echo "WEBHOOKS_URL=https://webhooks.cloudapi.dev.didxtech.com" >> $GITHUB_ENV

          echo ACAPY_MULTITENANT_JWT_SECRET=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_MULTITENANT_JWT_SECRET}' | base64 -d) >> $GITHUB_ENV
          echo "::add-mask::$ACAPY_MULTITENANT_JWT_SECRET"
          echo "CLOUDAPI_URL=https://cloudapi.dev.didxtech.com" >> $GITHUB_ENV

          # ./app/tests/util/constants.py
          echo "GOVERNANCE_FASTAPI_ENDPOINT=https://cloudapi.dev.didxtech.com" >> $GITHUB_ENV
          echo GOVERNANCE_ACAPY_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_GOVERNANCE_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          echo "::add-mask::$GOVERNANCE_ACAPY_API_KEY"
          echo "TENANT_FASTAPI_ENDPOINT=https://cloudapi.dev.didxtech.com"  >> $GITHUB_ENV
          echo TENANT_ACAPY_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_TENANT_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          echo "::add-mask::$TENANT_ACAPY_API_KEY"
          echo "LEDGER_REGISTRATION_URL=https://ledger-browser.cloudapi.dev.didxtech.com/register" >> $GITHUB_ENV
          echo "WEBHOOKS_URL=https://webhooks.cloudapi.dev.didxtech.com" >> $GITHUB_ENV
      - name: Test with pytest
        id: test
        # if: github.event.inputs.run-test-with-pytest == 'true'
        continue-on-error: true
        run: |
          pytest  --cov=trustregistry --cov=app app/tests/e2e
          #pytest -v -k test_create_invitation
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
          echo done
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }} # Needed for Codacy reporting
