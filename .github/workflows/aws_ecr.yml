name: Deploy to ECR

on:
  workflow_dispatch:
    inputs:
      run-update-deployments:
        description: 'Run Update Deployments step manually'
        required: false
        default: 'false'
      run-tests:
        description: 'Run test step manually'
        required: false
        default: 'false'
      # run-build:
      #   description: 'Run build step manually'
      #   required: false
      #   default: 'true'
  push:
    branches:
      - "development"
    tags:
      - "v*"
  pull_request:
    branches:
      - "development"
  pull_request_review:
    types: [submitted]

concurrency:
  group: deploy-to-ecr
  cancel-in-progress: false

jobs:
#   build:
#     name: Build image and push to ECR
#     runs-on: ubuntu-latest

#     outputs:
#       image_version: ${{ steps.meta.outputs.version }}

#     strategy:
#       matrix:
#         image:
#           [
#             ledger-nodes,
#             ledger-browser,
#             tails-server,
#             governance-ga-agent,
#             governance-trust-registry,
#             governance-multitenant-web,
#             governance-webhooks-web,
#             governance-multitenant-agent,
#             governance-endorser,
#           ]
#         include:
#           - image: governance-ga-agent
#             context: .
#             file: dockerfiles/agents/Dockerfile.agent
#           - image: governance-trust-registry
#             context: .
#             file: dockerfiles/trustregistry/Dockerfile
#           - image: governance-multitenant-web
#             context: .
#             file: dockerfiles/fastapi/Dockerfile
#           - image: governance-webhooks-web
#             context: .
#             file: dockerfiles/webhooks/Dockerfile
#           - image: governance-multitenant-agent
#             context: .
#             file: dockerfiles/agents/Dockerfile.author.agent
#           - image: ledger-browser
#             context: https://github.com/didx-xyz/von-network.git
#             file: Dockerfile
#           - image: ledger-nodes
#             context: https://github.com/didx-xyz/von-network.git
#             file: Dockerfile
#           - image: governance-endorser
#             context: .
#             file: dockerfiles/endorser/Dockerfile
#           - image: tails-server
#             context: https://github.com/bcgov/indy-tails-server.git#v1.0.0
#             file: docker/Dockerfile.tails-server

#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: af-south-1

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Docker Metadata
#         id: meta
#         uses: docker/metadata-action@v4
#         with:
#           images: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.image }}
#           tags: |
#             type=ref,event=branch
#             type=ref,event=pr
#             type=semver,pattern={{version}}
#             type=semver,pattern={{major}}.{{minor}}

#       - name: Build and push Docker images
#         # if: github.event.inputs.run-build == 'true'
#         uses: docker/build-push-action@v4
#         with:
#           context: ${{ matrix.context }}
#           file: ${{ matrix.file }}
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha,scope=build-${{ matrix.image }}
#           cache-to: type=gha,mode=max,scope=build-${{ matrix.image }}

#   deploy:
#     name: Deploy to EKS
#     needs: build
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write # This is required for requesting the JWT
#     # concurrency: dev-cloudapi # Only one EKS deployment at a time
#     outputs:
#       output: ${{ steps.updated_deployments.outputs.success }}
#     env:
#       projects: |
#         ledger-nodes
#         ledger-browser
#         governance-ga-agent
#         governance-multitenant-agent
#         governance-multitenant-web
#         governance-trust-registry
#         governance-webhooks-web
#         governance-endorser
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Checkout Helm chart
#         uses: actions/checkout@v3
#         with:
#           repository: didx-xyz/cloud_api_helm
#           token: ${{ secrets.HELM_REPO_TOKEN }} # private access token here, for HTTPS clones
#           path: helm/Chart

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-region: af-south-1
#           role-to-assume: arn:aws:iam::402177810328:role/cicd
#           role-session-name: github-cicd

#       - name: Install Helm
#         uses: azure/setup-helm@v3
#         with:
#           version: latest

#       - name: Install helm plugins
#         run: |
#           helm plugin install https://github.com/jkroepke/helm-secrets --version v4.4.2
#           helm plugin install https://github.com/databus23/helm-diff

#       - name: Setup Go
#         uses: actions/setup-go@v2
#         with:
#           go-version: 1.17

#       - name: Cache Go modules
#         uses: actions/cache@v2
#         id: go-cache
#         with:
#           path: ~/go/pkg/mod
#           key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#           restore-keys: |
#             ${{ runner.os }}-go-
      
#       - name: Install sops
#         run: |
#           if [ "${{ steps.go-cache.outputs.cache-hit }}" != "true" ]; then
#             go install go.mozilla.org/sops/v3/cmd/sops@latest
#           fi
#           echo "$HOME/go/bin" >> $GITHUB_PATH

#       - name: Update Kubeconfig
#         run: aws eks update-kubeconfig --name cloudapi-dev

#       - name: Tailscale
#         uses: tailscale/github-action@main
#         with:
#           authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
#           version: 1.38.2
#           args: --advertise-tags=tag:cicd

#       - name: Symlink shared models
#         run: |
#           mkdir -p helm/Chart/assets
#           cd helm/Chart/assets
#           ln -s ../../../shared_models .

#       # - name: Diff upgrade
#       #   run: |
#       #     for project in $(echo "${{ env.projects }}" | sed 's/\n/ /g'); do
#       #       helm -n dev-cloudapi \
#       #         secrets diff upgrade "${project}" \
#       #         --install \
#       #         --set image.tag=${{ needs.build.outputs.image_version }} \
#       #         -f ./helm/Values/${project}.yaml \
#       #         -f ./helm/Secrets/${project}.yaml \
#       #         ./helm/Chart
#       #     done

#       - name: Destroy deployments
#         id: destroy_deployments
#         if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments == 'true'
#         continue-on-error: true
#         run: |
#           for project in $(echo "${{ env.projects }}" | sed 's/\n/ /g'); do
#             helm -n dev-cloudapi delete ${project} || true
#           done

#       - name: Drop DBs
#         id: drop_dbs
#         if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments == 'true'
#         env:
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           DB_HOST: ${{ secrets.DB_HOST }}
#           DB_USER: ${{ secrets.DB_USER}}
#           DB_PORT: ${{ secrets.DB_PORT }}
#           DB_EXCLUDE: ${{ secrets.DB_EXCLUDE }}
#         run: |
#           bash ./scripts/aurora-delete.sh -o didx -d
#           bash ./scripts/aurora-delete.sh -o didx_multitenant -d

#       - name: Update deployments
#         id: update_deployments
#         if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments == 'true'
#         run: |
#           for project in $(echo "${{ env.projects }}" | sed 's/\n/ /g'); do
#             helm -n dev-cloudapi \
#               secrets upgrade "${project}" \
#               --install \
#               --atomic \
#               --timeout=300s \
#               --set image.tag=${{ needs.build.outputs.image_version }} \
#               -f ./helm/Values/${project}.yaml \
#               -f ./helm/Secrets/${project}.yaml \
#               ./helm/Chart
#           done
#           # TODO: there is an istio bug
#           kubectl -n dev-cloudapi rollout restart deploy governance-multitenant-web

#       - name: Output
#         id: updated_deployments
#         if: steps.update_deployments.outcome == 'success'
#         run: echo "success=true" >> "$GITHUB_OUTPUT"

  test:
    # needs: deploy
    if: needs.deploy.outputs.output == 'true' || github.event.inputs.run-tests == 'true'
    name: Test with pytest
    runs-on: ubuntu-20.04
    permissions:
      id-token: write # This is required for requesting the JWT
    # concurrency: dev-cloudapi # Only one test / deployment at a time
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.8.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.8.10"

      - name: Install test dependencies.
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt -r requirements.dev.txt -r trustregistry/requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd

      - name: Install Helm (for kubectl)
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name cloudapi-dev

      - name: Tailscale
        uses: tailscale/github-action@main
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          version: 1.38.2
          args: --advertise-tags=tag:cicd

      - name: Set environment variables
        run: |
          # # TODO: set encrypted secrets programatically with terraform
          # # ./app/constants.py
          # echo "ACAPY_GOVERNANCE_AGENT_URL=https://governance-ga-agent.cloudapi.dev.didxtech.com" >> $GITHUB_ENV
          # echo "ACAPY_TENANT_AGENT_URL=https://governance-mt-agent.cloudapi.dev.didxtech.com" >> $GITHUB_ENV
          # echo ACAPY_GOVERNANCE_AGENT_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_GOVERNANCE_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          # echo ACAPY_TENANT_AGENT_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_TENANT_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          # echo "TRUST_REGISTRY_URL=https://trust-registry.cloudapi.dev.didxtech.com" >> $GITHUB_ENV

          # echo "WEBHOOKS_URL=https://webhooks.cloudapi.dev.didxtech.com" >> $GITHUB_ENV

          # echo ACAPY_MULTITENANT_JWT_SECRET=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_MULTITENANT_JWT_SECRET}' | base64 -d) >> $GITHUB_ENV
          # echo "CLOUDAPI_URL=https://cloudapi.dev.didxtech.com" >> $GITHUB_ENV

          # # ./app/tests/util/constants.py
          # echo "GOVERNANCE_FASTAPI_ENDPOINT=https://cloudapi.dev.didxtech.com" >> $GITHUB_ENV
          # echo GOVERNANCE_ACAPY_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_GOVERNANCE_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          # echo "TENANT_FASTAPI_ENDPOINT=https://cloudapi.dev.didxtech.com"  >> $GITHUB_ENV
          # echo TENANT_ACAPY_API_KEY=$(kubectl -n dev-cloudapi get secret ga-and-mt-web-env -o jsonpath='{.data.ACAPY_TENANT_AGENT_API_KEY}' | base64 -d) >> $GITHUB_ENV
          # echo "LEDGER_REGISTRATION_URL=https://ledger-browser.cloudapi.dev.didxtech.com/register" >> $GITHUB_ENV
          # echo "WEBHOOKS_URL=https://webhooks.cloudapi.dev.didxtech.com" >> $GITHUB_ENV
      - name: Test with pytest
        id: test
        run: |
          source ./scripts/env.sh
          # pytest --cov=trustregistry --cov=app trustregistry app
          pytest -v app/tests/e2e/test_verifier.py
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
          echo done
        # env:
        #   CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }} # Needed for Codacy reporting