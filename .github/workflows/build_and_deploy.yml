name: Build and Deploy

on:
  push:
    branches: 
      - main
      - development
    # Publish semver tags as releases.
    tags: 
      - v*.*.*
  pull_request_review:
    branches: 
      - main
      - development
    types:
      - submitted

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  IMAGE_TAG: ${{ github.sha }}
  EKS_CLUSTER_NAME: aries-default
  HELM_VERSION: 3.9.0
  AWS_REGION: af-south-1

jobs:
  docker_build_and_publish:
    if: github.event.review.state == 'approved' || github.ref_name	== 'development' || github.ref_name	== 'main'
    
    strategy:
      matrix:
        registry_image: [
          324190738845.dkr.ecr.af-south-1.amazonaws.com/agent, 
          324190738845.dkr.ecr.af-south-1.amazonaws.com/fastapi,
          324190738845.dkr.ecr.af-south-1.amazonaws.com/trustregistry,
          324190738845.dkr.ecr.af-south-1.amazonaws.com/webhooks
        ]
        include:
          - 
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/agent
            file: ./dockerfiles/agents/Dockerfile.agent
          - 
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/fastapi
            file: ./dockerfiles/fastapi/Dockerfile
          - 
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/trustregistry
            file: ./dockerfiles/trustregistry/Dockerfile
          - 
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/webhooks
            file: ./dockerfiles/webhooks/Dockerfile
    
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: AWS Login
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      -
        name: AWS ECR Login
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          file: ${{ matrix.file }}
          push: true
          tags: ${{ matrix.registry_image }}:${{ env.IMAGE_TAG }}
          build-contexts: plugins=https://github.com/didx-xyz/acapy-wallet-groups-plugin.git


  Release:
    needs: docker_build_and_publish
    if: github.ref_name	== 'development' || github.ref_name	== 'main' || github.ref_name	== 'devops-updateci'
    
    strategy:
      matrix:
        project_name: [
          governance-ga-agent, 
          governance-ga-web,
          governance-multitenant-agent,
          governance-multitenant-web,
          governance-trust-registry,
          governance-webhooks-web
        ]
        include:
          - 
            project_name: governance-ga-agent
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/agent
            file: ./dockerfiles/agents/Dockerfile.agent
          -
            project_name: governance-multitenant-agent
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/agent
            file: ./dockerfiles/agents/Dockerfile.agent
          - 
            project_name: governance-ga-web
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/fastapi
            file: ./dockerfiles/fastapi/Dockerfile
          - 
            project_name: governance-multitenant-web
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/fastapi
            file: ./dockerfiles/fastapi/Dockerfile
          - 
            project_name: governance-trust-registry
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/trustregistry
            file: ./dockerfiles/trustregistry/Dockerfile
          - 
            project_name: governance-webhooks-web
            registry_image: 324190738845.dkr.ecr.af-south-1.amazonaws.com/webhooks
            file: ./dockerfiles/webhooks/Dockerfile
    
    runs-on: ubuntu-latest

    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: AWS Login
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - 
        name: Install Helm
        run: |
          curl -sL "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" | tar -zx -C /tmp/
          mv /tmp/linux-amd64/helm /usr/local/bin/
          aws eks --region "${AWS_REGION}" update-kubeconfig --name "${EKS_CLUSTER_NAME}"
      - 
        name: Get Helm chart repo
        uses: actions/checkout@v3
        with:
          repository: didx-xyz/cloud_api_helm
          token: ${{ secrets.HELM_REPO_TOKEN }} # private access token here, for HTTPS clones
          path: helm/Chart
      -
        name: Deploy Helm Release
        run: helm -n app upgrade --install --atomic --timeout=300s "${{ matrix.project_name }}" ./helm/Chart/ -f "./helm/Values/${{ matrix.project_name }}.yaml" --set image.repository="${{ matrix.registry_image }}" --set image.tag="${IMAGE_TAG}"